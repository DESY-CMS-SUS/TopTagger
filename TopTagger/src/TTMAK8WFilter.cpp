#include "TopTagger/TopTagger/include/TTMAK8WFilter.h"

#include "TopTagger/TopTagger/include/TopTaggerResults.h"
#include "TopTagger/CfgParser/include/Context.hh"
#include "TopTagger/CfgParser/include/CfgDocument.hh"

void TTMAK8WFilter::getParameters(const cfg::CfgDocument* cfgDoc)
{
    //Construct contexts
    cfg::Context commonCxt("Common");
    cfg::Context localCxt("TTMAK8Filter");
    
    dRMatch_ = cfgDoc->get("dRMatch", localCxt, -999.9);
}

void TTMAK8WFilter::run(TopTaggerResults& ttResults)
{
    //Get list of constituents used to construct tops
    const std::vector< Constituent>& constituents = ttResults.getConstituents();
    //Get the list of top candidates as generated by the clustering algo
    std::vector<TopObject>& topCandidates = ttResults.getTopCandidates();
    //Get the list of final tops into which we will stick candidates
    std::vector<TopObject*>& tops = ttResults.getTops();
    //This container will kep trach of which jets have been included in final tops
    std::set<Constituent const *>& usedJets = ttResults.getUsedConstituents();

    //This class adds the merged objects to the final top list 
    for(auto& topCand : topCandidates)
    {
        //For now this just adds the merged tops
        //if(topCand.getNConstituents() == 1 && constituentIsUsed(topCand.getConstituents()[0], usedJets, dRMatch_))
        //{
        //    tops.push_back(&topCand);
        //    constituentUsed(topCand.getConstituents()[0], constituents, usedJets, dRMatch_);
        //}
    }    
}
