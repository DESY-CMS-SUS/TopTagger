#include "TopTagger/TopTagger/include/TTMXGBoost.h"

#include "TopTagger/TopTagger/include/TopTaggerUtilities.h"
#include "TopTagger/TopTagger/include/TopObject.h"
#include "TopTagger/TopTagger/include/TopTaggerResults.h"
#include "TopTagger/CfgParser/include/Context.hh"
#include "TopTagger/CfgParser/include/CfgDocument.hh"
#include "TopTagger/CfgParser/include/TTException.h"

#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <memory>
#include <vector>

void TTMXGBoost::getParameters(const cfg::CfgDocument* cfgDoc, const std::string& localContextName)
{
#ifdef DOXGBOOST
    //Construct contexts
    cfg::Context commonCxt("Common");
    cfg::Context localCxt(localContextName);

    discriminator_ = cfgDoc->get("discCut",      localCxt, -999.9);
    modelFile_     = cfgDoc->get("modelFile",    localCxt, "");
    inputOp_       = cfgDoc->get("inputOp",      localCxt, "x");
    outputOp_      = cfgDoc->get("outputOp",     localCxt, "y");

    csvThreshold_  = cfgDoc->get("csvThreshold", localCxt, -999.9);
    bEtaCut_       = cfgDoc->get("bEtaCut",      localCxt, -999.9);
    maxNbInTop_    = cfgDoc->get("maxNbInTop",   localCxt, -1);

    int iVar = 0;
    bool keepLooping;
    do
    {
        keepLooping = false;

        //Get variable name
        std::string varName = cfgDoc->get("mvaVar", iVar, localCxt, "");

        //if it is a non empty string save in vector
        if(varName.size() > 0)
        {
            keepLooping = true;

            vars_.push_back(varName);
        }
        ++iVar;
    }
    while(keepLooping);

    //Variable to hold xgboost status
    int status = 0;

    //get the booster from the file
    status =  XGBoosterCreate({}, 0, &h_booster);
    status |= XGBoosterLoadModel(h_booster, modelFile_.c_str());

    if(status) 
    {
        THROW_TTEXCEPTION("ERROR: Unable to import model from file: " + modelFile_);
    }

#endif
}

void TTMXGBoost::run(TopTaggerResults& ttResults)
{
#ifdef DOXGBOOST
    //Get the list of top candidates as generated by the clustering algo
    std::vector<TopObject>& topCandidates = ttResults.getTopCandidates();
    //Get the list of final tops into which we will stick candidates
    std::vector<TopObject*>& tops = ttResults.getTops();

    //xgboost status variable
    int status = 0;


    for(auto& topCand : topCandidates)
    {
        //We only want to apply the MVA algorithm to triplet tops
        if(topCand.getNConstituents() == 3)
        {
            //Prepare data from top candidate (this code is shared with training tuple producer)
            //Perhaps one day the intermediate map can be bypassed ...
            std::map<std::string, double> varMap = ttUtility::createMVAInputs(topCand, csvThreshold_);

            //temp vector to translate from map to DMatrix ... should be unneeded with a tiny bit more thought
            std::vector<float> data(vars_.size());

            //populate tensor based on desired input variables 
            for(unsigned int i = 0; i < vars_.size(); ++i)
            {
                data[i] = varMap[vars_[i]];
            }

            // convert to DMatrix
            DMatrixHandle h_data;
            status = XGDMatrixCreateFromMat(data.data(), 1, data.size(), -1, &h_data);

            //predict value
            bst_ulong out_len;
            const float *output;
            status = XGBoosterPredict(h_booster, h_data, 0,0, &out_len, &output);

            if(status)
            {
                THROW_TTEXCEPTION("ERROR: Unable to run booster");
            }

            if(out_len < 1)
            {
                THROW_TTEXCEPTION("ERROR: Booster produced no output");
            }

            //clean up DMatrix
            XGDMatrixFree(h_data);

            //Get output discriminator 
            topCand.setDiscriminator(output[0]);
            
            //Check number of b-tagged jets in the top
            bool passBrequirements = maxNbInTop_ < 0 || topCand.getNBConstituents(csvThreshold_, bEtaCut_) <= maxNbInTop_;

            //place in final top list if it passes the threshold
            if(topCand.getDiscriminator() > discriminator_ && passBrequirements)
            {
                tops.push_back(&topCand);
            }
        }
    }
#endif
}

TTMXGBoost::~TTMXGBoost()
{    
#ifdef DOXGBOOST

    XGBoosterFree(h_booster);

#endif
}


